1.Spring Framework
オブジェクトの関連付け、生成、登録などを管理する「Coreモジュール」
JavaBeansへのアクセス機能を提供する「Context モジュール」
MVCモデルでの開発を提供する「Web MVCモジュール」
など7種類のモジュールで構成されている。
また、Webアプリケーションだけでなく、Javaプラットフォームで動作するさまざまなアプリケーションに適用することができるフレームワークであり採用しているシステムも比較的多い。
カバーしている範囲がとても広い万能型フレームワーク。

2.Play Framework
現代の web アプリケーション開発に必要なコンポーネント及び API を統合した生産性の高い Java と Scala の web アプリケーションフレームワーク。
特徴は、ライトウェイト、ステートレス、web フレンドリーなアーキテクチャであること、機能予測のしやすさ。
また、Iteratee IO をベースにしたリアクティブモデルのおかげで、スケーラブルなアプリケーションでも CPU、メモリ、スレッドなどのリソース消費が最小限になっている。
Javaおよび関数型言語のScalaというプログラミング言語をサポートしているフレームワーク。
使いやすくて開発しやすいことに主眼が置かれたフレームワーク。

3.JSF（JavaServer Faces）
Java EE（Java Platform, Enterprise Edition）という環境で動作する標準的なコンポーネント志向（機能ごとに部品として扱う考え方）のユーザーインターフェイスフレームワーク。
JSFはJavaEEに含まれているので、新しくライブラリなどをプロジェクトに追加しなくても使うことができる。
ユーザーインターフェイス（ユーザーが操作する見た目の部分）を簡単に作ることができるフレームワークで、Struts（ストラッツ）と同じMVCモデルを採用したフレームワーク。
※厳密にはStrutsのMVCモデルとはベースが異なる
メリットとしては、開発チームとデザインチームで分業できる特徴があり、Strutsに比べて分業が行いやすい。
